// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Collections.Generic;
using System.IO;
using Foundation;
using MySql.Data.MySqlClient;
using UIKit;

namespace YeahFit
{
	public partial class AddWorkoutViewController : UIViewController
	{
        MySqlCommand cmd;
        MemoryStream fs;
        BinaryReader br;

        UIImagePickerController picker;

        internal static List<Exercise> exercises;
        public static List<InternalExercise> internalExercises;

        public static int index;

        public static WorkoutViewController workoutViewController;

        public static Workout selectedWorkout;

        public static bool edit;

        public AddWorkoutViewController (IntPtr handle) : base (handle)
		{
		}

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();

            internalExercises = new List<InternalExercise>{ };
            exercises = new List<Exercise>
            {
                new Exercise
                {
                    ExerciseName = "",
                    ExerciseSets = "",
                    ExerciseReps = "",
                },
            };

            // Set source for steps list
            AddExerciseViewController.addWorkoutViewController = this;
            tableView_AddWorkouts.Source = new AddWorkoutTableViewSource(exercises, this, selectedWorkout);

            // Reload
            tableView_AddWorkouts.ReloadData();

            // Button click for choosen an image from gallery
            btn_takePhoto.TouchUpInside += (sender, e) =>
            {
                picker = new UIImagePickerController();
                picker.SourceType = UIImagePickerControllerSourceType.PhotoLibrary;
                picker.MediaTypes = UIImagePickerController.AvailableMediaTypes(UIImagePickerControllerSourceType.PhotoLibrary);
                picker.FinishedPickingMedia += Finished;
                picker.Canceled += Canceled;
                PresentViewController(picker, animated: true, completionHandler: null);
            };

            btn_AddWorkout.TouchUpInside += (sender, e) =>
            {
                new Workout
                {
                    WorkoutImage = null,
                    WorkoutName = lbl_workoutName.Text,
                    Exercises = exercises,

                };
            };
        }

        /// <summary>
        /// If view reappears
        /// </summary>
        /// <param name="animated"></param>
        public override void ViewDidAppear(bool animated)
        {
            base.ViewDidAppear(animated);

            // Reload TableViews
            tableView_AddWorkouts.ReloadData();
        }

        /// <summary>
        /// Refreshes staps table view on SecondView
        /// </summary>
        /// <param name="secondViewController"></param>
        /// <param name="StepInfo"></param>
        public static void RefreshExercises(AddWorkoutViewController addWorkoutViewController)
        {
            addWorkoutViewController.ViewDidAppear(true);
        }

        /// <summary>
        /// Set image
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        public void Finished(object sender, UIImagePickerMediaPickedEventArgs e)
        {
            bool isImage = false;
            switch (e.Info[UIImagePickerController.MediaType].ToString())
            {
                case "public.image":
                    isImage = true;
                    break;
                case "public.video":
                    break;
            }
            NSUrl referenceURL = e.Info[new NSString("UIImagePickerControllerReferenceUrl")] as NSUrl;
            if (referenceURL != null) Console.WriteLine("Url:" + referenceURL.ToString());
            if (isImage)
            {
                UIImage originalImage = e.Info[UIImagePickerController.OriginalImage] as UIImage;
            }
            else
            {
                NSUrl mediaURL = e.Info[UIImagePickerController.MediaURL] as NSUrl;
                if (mediaURL != null)
                {
                    Console.WriteLine(mediaURL.ToString());
                }
            }
            picker.DismissModalViewController(true);
        }

        /// <summary>
        /// If user doesn't select an image from image picker
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        void Canceled(object sender, EventArgs e)
        {
            picker.DismissModalViewController(true);
        }
    }
}
