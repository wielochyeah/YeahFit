// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Collections;
using System.Data.SqlClient;
using System.Drawing;
using System.IO;
using CarPlay;
using CoreFoundation;
using CoreGraphics;
using Foundation;
using MySql.Data.MySqlClient;
using SDWebImage;
using UIKit;
using static System.Net.Mime.MediaTypeNames;

namespace YeahFit
{
    public partial class WorkoutStepViewController : UIViewController
    {
        public static int index;
        public static Workout selectedWorkout;
        int i = 0;


        public static WorkoutViewController workoutViewController;

        MySqlConnection con;

        NSTimer timer;
        int seconds = 0;

        public WorkoutStepViewController(IntPtr handle) : base(handle)
        {
        }

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();

            con = new MySqlConnection(@"Server=localhost;Database=YeahFit;User Id=root;Password=; CharSet = utf8");
            con.Open();

            var gifData = new byte[1024];
            gifData = selectedWorkout.Exercises[i].ExerciseImage;
            NSData imageData = NSData.FromArray(gifData);

            var imageView = new FLAnimatedImageView();
            imageView.Frame = new CoreGraphics.CGRect(-200, -60, 850, 850);
            imageView.Frame = new CoreGraphics.CGRect(-200, -60, 850, 850);
            imageView.ContentMode = UIViewContentMode.ScaleAspectFit;
            View.AddSubview(imageView);

            // Load the GIF image from a byte array
            var animatedImage = FLAnimatedImage.AnimatedImageWithGIFData(imageData);

            // Set the animatedImage property of the FLAnimatedImageView
            imageView.AnimatedImage = animatedImage;

            timer = NSTimer.CreateRepeatingScheduledTimer(TimeSpan.FromSeconds(1), delegate
            {
                seconds++;
                int minutes = seconds / 60;
                int remainingSeconds = seconds % 60;
                timerLabel.Text = $"{minutes}:{remainingSeconds:00}";
            });

            lbl_ExerciseName.Text = selectedWorkout.Exercises[i].ExerciseName;
            lbl_SetsReps.Text = selectedWorkout.Exercises[i].ExerciseSets + "x" + selectedWorkout.Exercises[i].ExerciseReps;
            if (selectedWorkout.Exercises[i + 1] != null)
            {
                lbl_NextExercise.Text = "Nächste Übung: " + selectedWorkout.Exercises[i + 1].ExerciseName;
            }
            else
            {
                lbl_NextExercise.Text = "Letzte Übung";
            }

            btn_NextExercise.TouchUpInside += (sender, e) =>
            {
                i++;
                if (selectedWorkout.Exercises.Count > i)
                {
                    lbl_ExerciseName.Text = selectedWorkout.Exercises[i].ExerciseName;
                    lbl_SetsReps.Text = selectedWorkout.Exercises[i].ExerciseSets + "x" + selectedWorkout.Exercises[i].ExerciseReps;

                    gifData = selectedWorkout.Exercises[i].ExerciseImage;
                    imageData = NSData.FromArray(gifData);
                    imageView = new FLAnimatedImageView();
                    imageView.Frame = new CoreGraphics.CGRect(-200, -60, 850, 850);
                    imageView.Frame = new CoreGraphics.CGRect(-200, -60, 850, 850);
                    imageView.ContentMode = UIViewContentMode.ScaleAspectFit;
                    View.AddSubview(imageView);

                    // Load the GIF image from a byte array
                    animatedImage = FLAnimatedImage.AnimatedImageWithGIFData(imageData);

                    // Set the animatedImage property of the FLAnimatedImageView
                    imageView.AnimatedImage = animatedImage;

                    if (selectedWorkout.Exercises.Count <= i + 1)
                    {
                        lbl_NextExercise.Text = "Letzte Übung";
                        btn_NextExercise.SetTitle("Workout beenden", UIControlState.Normal);

                    }
                    else
                    {
                        lbl_NextExercise.Text = "Nächste Übung: " + selectedWorkout.Exercises[i + 1].ExerciseName;
                        ResetTimer();
                    }
                }
                else
                {
                    if (LoginViewController.loggedin == true)
                    {
                        string query = $"INSERT INTO Benutzer_Workout_Woche (BenutzerID, WochenID, WorkoutID, WorkoutDatum) " +
                        $"VALUES ({Convert.ToInt32(LoginViewController.userID)}, {Convert.ToInt32(InitializeWeek.wochenid)}, {Convert.ToInt32(selectedWorkout.id)}, @value)";
                        MySqlCommand cmd = new MySqlCommand(query, con);
                        cmd.Parameters.AddWithValue("@value", DateTime.Now);
                        cmd.ExecuteNonQuery();

                        if (selectedWorkout.difficulty == "Hart")
                        {
                            string completeHardWorkout = $"UPDATE `Benutzer_Awards` SET `Absolviere ein hartes Workout` = `Absolviere ein hartes Workout` + 1 WHERE `BenutzerID` = {LoginViewController.userID};";
                            MySqlCommand command2 = new MySqlCommand(completeHardWorkout, con);
                            command2.ExecuteNonQuery();
                        }

                        /*
                        if (selectedWorkout.difficulty == "Fortgeschritten")
                        {
                            string completeHardWorkout = $"UPDATE `Benutzer_Awards` SET `Absolviere ein hartes Workout` = `Absolviere ein hartes Workout` + 1 WHERE `BenutzerID` = {LoginViewController.userID};";
                            MySqlCommand command2 = new MySqlCommand(completeHardWorkout, con);
                            command2.ExecuteNonQuery();
                        }
                        */

                        this.DismissViewController(true, () => { WorkoutViewController.Refresh(workoutViewController); });
                    }
                }
            };

            btn_Break.TouchUpInside += (sender, e) =>
            {

            };
        }

        public override void ViewWillDisappear(bool animated)
        {
            base.ViewWillDisappear(animated);
            timer.Invalidate();
        }

        void ResetTimer()
        {
            seconds = 0;
            timerLabel.Text = "0:00";
        }
    }
}