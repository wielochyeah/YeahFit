// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Security.Cryptography;
using System.Text;
using Foundation;
using MySql.Data.MySqlClient;
using UIKit;

namespace YeahFit
{
	public partial class CreateAccountViewController : UIViewController
	{
        public static LoginViewController loginViewController;

        public static MySqlConnection con = new MySqlConnection(@"Server=localhost;Database=YeahFit;User Id=root;Password=; CharSet = utf8");
        string username;
        string createUsername = "";

        public CreateAccountViewController(IntPtr handle) : base(handle)
        {
        }

        /// <summary>
        /// Initialize
        /// </summary>
        public override void ViewDidLoad()
        {
            base.ViewDidLoad();

            con.Open();

            btn_CreateAccount.TouchUpInside += (sender, e) =>
            {
                if (txtField_Username.Text != null && txtField_Username.Text != "" && 
                txtField_PasswordFirst.Text != null && txtField_PasswordFirst.Text != "" && 
                txtField_Password.Text != null && txtField_Password.Text != "")
                {
                    if (txtField_Password.Text == txtField_PasswordFirst.Text)
                    {
                        using (MySqlCommand getusername = new MySqlCommand($"SELECT * FROM `Login` " +
                            $"WHERE username=" + "'" + txtField_Username.Text + "'", con))
                        {
                            using (MySqlDataReader reader = getusername.ExecuteReader())
                            {
                                if (reader.Read())
                                {
                                    while (reader.Read())
                                    {
                                        username = reader["username"].ToString();
                                        if (username != txtField_Username.Text)
                                        {
                                            lbl_CreateAccountComment.Text = "Benutzername bereits vergeben.";
                                            createUsername = "";
                                            break;
                                        }
                                        else
                                        {
                                            createUsername = username;
                                            break;
                                        }
                                    }
                                }
                                else
                                {
                                    createUsername = txtField_Username.Text;
                                }
                            }
                        }
                    }
                    else
                    {
                        lbl_CreateAccountComment.Text = "Passwörter stimmen nicht überein.";
                    }

                    if (createUsername != "")
                    {
                        lbl_CreateAccountComment.Text = "Profil erstellt!";
                        MySqlCommand insert = new MySqlCommand($"INSERT INTO Login (password, username) VALUES ('{ToSHA256(txtField_Password.Text)}', '{createUsername}');", con);
                        insert.ExecuteNonQuery();

                        // View Schließen
                        this.DismissViewController(true, () => { LoginViewController.Refresh(loginViewController); });
                    }
                    else
                    {
                        lbl_CreateAccountComment.Text = "Benutzername bereits vergeben.";
                    }
                }
                else
                {
                    lbl_CreateAccountComment.Text = "Alle Felder müssen ausgefüllt werden.";
                }
            };
        }

        public static string ToSHA256(string value)
        {
            SHA256 sha256 = SHA256.Create();

            byte[] hashData = sha256.ComputeHash(Encoding.Default.GetBytes(value));
            StringBuilder returnValue = new StringBuilder();

            for (int i = 0; i < hashData.Length; i++)
            {
                returnValue.Append(hashData[i].ToString());
            }

            return returnValue.ToString();
        }

        public override void ViewDidDisappear(bool animated)
        {
            base.ViewDidDisappear(animated);
            con.Close();
        }
    }
}
